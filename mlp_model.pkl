# mlp_model.py
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report
import pickle

# Load the dataset
def load_data():
    url = 'https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv'
    columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
    data = pd.read_csv(url, names=columns)
    return data

# Preprocess the data (normalization and splitting)
def preprocess_data(data):
    X = data.drop('Outcome', axis=1)
    Y = data['Outcome']

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=42)
    
    return X_train, X_test, Y_train, Y_test

# Train the model and save it
def train_mlp_model(X_train, Y_train, X_test, Y_test):
    mlp = MLPClassifier(hidden_layer_sizes=(10, 10), max_iter=1000, random_state=42)
    mlp.fit(X_train, Y_train)

    Y_pred = mlp.predict(X_test)

    accuracy = accuracy_score(Y_test, Y_pred)
    print(f'Accuracy: {accuracy:.4f}')
    print("\nClassification Report:")
    print(classification_report(Y_test, Y_pred))

    # Save the trained model to a .pkl file
    with open('mlp_model.pkl', 'wb') as f:
        pickle.dump(mlp, f)

# Main function to run the steps
def main():
    print("Loading data...")
    data = load_data()
    
    print("Preprocessing data...")
    X_train, X_test, Y_train, Y_test = preprocess_data(data)
    
    print("Training MLP model...")
    train_mlp_model(X_train, Y_train, X_test, Y_test)

if __name__ == '__main__':
    main()
